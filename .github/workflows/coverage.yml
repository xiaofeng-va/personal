# While our "example" application has the platform-specific code,
# for simplicity we are compiling and testing everything on the Ubuntu environment only.
# For multi-OS testing see the `cross.yml` workflow.

on:
  push:
    branches:
      - main
      - feature/**
  pull_request:
    branches:
      - '**'
  
name: Coverage Report

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install toolchain
        uses: moonrepo/setup-rust@v1.2.1
        with:
          inherit-toolchain: true

      - name: Install and run tarpaulin
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --out Html --output-dir ./target/coverage

      - name: Determine identifier
        id: determine-id
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "id=pr-${{ github.event.number }}" >> $GITHUB_ENV
          else
            echo "id=commit-${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Move coverage to subdirectory
        run: |
          mkdir -p target/full-coverage/${{ env.id }}
          mv target/coverage/* target/full-coverage/${{ env.id }}

      - name: Create coverage artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./target/full-coverage

  deploy:
    name: Deploy Coverage Report

    # Add a dependency to the build job
    needs: coverage

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    # Specify runner + deployment step
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Post status to GitHub
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: "success",
              description: "Coverage report generated successfully.",
              context: "Coverage Report",
              target_url: process.env.url
            })